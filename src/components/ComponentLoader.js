/**
 * Component Loader - ‡πÇ‡∏´‡∏•‡∏î HTML components ‡πÅ‡∏ö‡∏ö dynamic
 */
class ComponentLoader {
    constructor() {
        this.components = new Map();
        this.loadedComponents = new Set();
    }

    /**
     * ‡πÇ‡∏´‡∏•‡∏î component ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå HTML
     * @param {string} componentName - ‡∏ä‡∏∑‡πà‡∏≠ component
     * @param {string} filePath - path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå component
     * @returns {Promise<string>} - HTML content ‡∏Ç‡∏≠‡∏á component
     */
    async loadComponent(componentName, filePath) {
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ component ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (this.components.has(componentName)) {
                return this.components.get(componentName);
            }

            // ‡πÇ‡∏´‡∏•‡∏î component ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
            const response = await fetch(filePath);
            if (!response.ok) {
                throw new Error(`Failed to load component: ${componentName} from ${filePath}`);
            }

            const html = await response.text();
            
            // ‡πÄ‡∏Å‡πá‡∏ö component ‡πÉ‡∏ô cache
            this.components.set(componentName, html);
            this.loadedComponents.add(componentName);

            console.log(`‚úÖ Component loaded: ${componentName}`);
            return html;
        } catch (error) {
            console.error(`‚ùå Error loading component ${componentName}:`, error);
            throw error;
        }
    }

    /**
     * ‡πÅ‡∏ó‡∏£‡∏Å component ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô DOM element
     * @param {string} targetSelector - CSS selector ‡∏Ç‡∏≠‡∏á element ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ó‡∏£‡∏Å component
     * @param {string} componentName - ‡∏ä‡∏∑‡πà‡∏≠ component
     * @param {string} filePath - path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå component
     * @param {string} insertMethod - ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏£‡∏Å ('innerHTML', 'insertAdjacentHTML')
     * @param {string} position - ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö insertAdjacentHTML ('beforeend', 'afterbegin', etc.)
     */
    async insertComponent(targetSelector, componentName, filePath, insertMethod = 'innerHTML', position = 'beforeend') {
        try {
            const targetElement = document.querySelector(targetSelector);
            if (!targetElement) {
                throw new Error(`Target element not found: ${targetSelector}`);
            }

            const componentHTML = await this.loadComponent(componentName, filePath);

            if (insertMethod === 'innerHTML') {
                targetElement.innerHTML = componentHTML;
            } else if (insertMethod === 'insertAdjacentHTML') {
                targetElement.insertAdjacentHTML(position, componentHTML);
            }

            console.log(`‚úÖ Component inserted: ${componentName} into ${targetSelector}`);
        } catch (error) {
            console.error(`‚ùå Error inserting component ${componentName}:`, error);
            throw error;
        }
    }

    /**
     * ‡πÇ‡∏´‡∏•‡∏î components ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
     * @param {Array} componentConfigs - array ‡∏Ç‡∏≠‡∏á config objects
     * @returns {Promise<void>}
     */
    async loadMultipleComponents(componentConfigs) {
        const loadPromises = componentConfigs.map(config => {
            const { targetSelector, componentName, filePath, insertMethod, position } = config;
            return this.insertComponent(targetSelector, componentName, filePath, insertMethod, position);
        });

        try {
            await Promise.all(loadPromises);
            console.log('‚úÖ All components loaded successfully');
        } catch (error) {
            console.error('‚ùå Error loading multiple components:', error);
            throw error;
        }
    }

    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ component ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
     * @param {string} componentName - ‡∏ä‡∏∑‡πà‡∏≠ component
     * @returns {boolean}
     */
    isComponentLoaded(componentName) {
        return this.loadedComponents.has(componentName);
    }

    /**
     * ‡∏•‡πâ‡∏≤‡∏á cache ‡∏Ç‡∏≠‡∏á component
     * @param {string} componentName - ‡∏ä‡∏∑‡πà‡∏≠ component (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
     */
    clearCache(componentName = null) {
        if (componentName) {
            this.components.delete(componentName);
            this.loadedComponents.delete(componentName);
            console.log(`üóëÔ∏è Cache cleared for component: ${componentName}`);
        } else {
            this.components.clear();
            this.loadedComponents.clear();
            console.log('üóëÔ∏è All component cache cleared');
        }
    }

    /**
     * ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î component
     * @param {string} targetSelector - CSS selector ‡∏Ç‡∏≠‡∏á element ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ó‡∏£‡∏Å component
     * @param {string} componentName - ‡∏ä‡∏∑‡πà‡∏≠ component
     * @param {string} filePath - path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå component
     */
    async reloadComponent(targetSelector, componentName, filePath) {
        this.clearCache(componentName);
        await this.insertComponent(targetSelector, componentName, filePath);
    }

    /**
     * ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ components ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
     * @returns {Array<string>}
     */
    getLoadedComponents() {
        return Array.from(this.loadedComponents);
    }
}

// Export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
export default ComponentLoader;